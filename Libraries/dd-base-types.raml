#%RAML 1.0 Library

# Name: dd-base-types.raml
#
# Date: 2018-07-10
#
#  This file defines the basic datatypes used in the DD API and DD-OPER API.

types:
  AdditionalQuality:
    type: integer
    description: Provides detailed information on specific Quality numbers.

  Altitude: number

  Aspect:
    description: A matematical derived variant of a specific measurement, forecast, etc.
    type: object
    properties:
      name: string
      unit: string

  AspectSet:
    description: The AspectSet defines a group of related mathematical values for a single measurement, forecast, etc
    type: object
    properties:
      name: AspectSetName
      aspects:
        type: Aspect[]
        minItems: 0

  AspectSetName:
    description:
    type: string
    default: "standard"
    example: "minimum, maximum, standard, ...."

  AspectPointsValue:
    description: Object used for Event.Aspect.Points. Specifies the values in points array in context of Aspect name.
    type: object
    properties:
      name:
        type: string
        description: Name of aspect.
      points: PointsValue[]

  AspectValue:
    description: Object used for Event.Aspect[] results. Specifies the value in context of Aspect name.
    type: object
    properties:
      name:
        type: string
        description: Name of aspect.
      value: number
      quality?: number
      additionalQuality?: number

# BB is not required as object since bbox is only used as query parameter (toch maar laten staan? SH)
  BoundingBox:
    description: The specification of a bounding box using the longitude and latitiude of the most SouthWest point followed by the most NorthEast points (GeoJSON).
    type: Double[]
    minItems: 4
    maxItems: 4
    examples:
      -bbox: [ 4.123456, 52.123456, 10.123456, 55.123456 ]

  Coordinate:
    type: number
    format: double

  Double:
    description: A value of type Double (todo specify #digits/format?).
    type: number
    format: double

  EndTime:
    type: datetime
    example: 2018-01-01T00:00:00Z
    description:  The End date/time of the timeseries, or the End date/time of the interval for an individual value in the series. Uses the UCT (Zulu) notation.
      The endtime is exlusive, hence the requested period ends just before the given time.
      2018-01-01T00:00:00Z - 2018-01-01T00:00:10Z  specifies a 10 minute period starting at midnight and
      ending at 2018-01-01T00:09:59.99999Z

  Event:
    description: In case of scalar time series the event contains time stamp and value, optionally extended with
      an interval specification (startTime/endTime/resultTime), and a quality indication (quality, additionalQuality).
      In case of a timeseries with Aspects or with values on multiple points, the events contains object for the aspects or points.
    type: object
    properties:
      timeStamp?: datetime
      startTime?: StartTime
      endTime?: EndTime
      resultTime?: datetime
      value?:
        description: The 'value', 'quantity' and 'additionalQuality' can be returned at this level (Event object) in case the AspectSet and/or Point nestings would be redundant and introduce unnecesssary levels in the response
        type: number
      quality?:
        description: See value attribute.
        type: number
      additionalQuality?:
        description: See also value attribute.
        type: number
      aspects?:
        type: AspectValue[] | AspectPointsValue []
        description: When Aspects are used the value/quality/unit are given in and object for each aspect or aspect+point.
      points?:
        type: PointsValue[]
        description: When multiple positions are involved the value/quantity/unit are given in context of each position.

  FilterError:
    type: object
    description: Defines the field of an error in the filtering syntax.
    properties:
      errorType: string
      context: string

  Geometry:
    description: A geometry in GeoJSON format. Digital Delta currently only supports the Point and MultiPoint types.
    type: object
    properties:
      type:
        description: The geometry type. Must have the value "Point" or "MultiPoint".
        type: string
        example: "Point"
      coordinates?:
        description: An array of doubles, representing a Longitude, Latitude and optional Altitude.
        type: Position | Positions
        examples:
          -point:  [4.234 , 5.23423]
          -multipoint:  [[4.2, 52.0], [3.2, 52.3,0]]

  Identifier:
    type: string | Uuid
    description: An uuid or a preferably human readable identifier.

  Institution:
    type: object
    properties:
      name:
        type: string
        description: The name of the institution that produced and/or owns the data
      description?:
        type: string
        description: Additional discription of the institution

# IntervalLength is not required as object since it is only used as query parameter (toch maar laten staan? SH)
  IntervalLength:
    default: 10min

  Location:
    description: Generic DD API 2.0 Location object structure that is used by /dd and /dd-oper. Most attributes are optional as the content returned in the response depends on the request.  Location attributes are placed within the properties group of the GeoJSON  object.
    properties:
      type:
        description: Type of GeoJSON object. In the DD-API the only allowed type is "Feature"
        type: string
        enum: ["Feature"]
      geometry:
        description: The coordinate(s) of the Location are placed within the "geometry" section of the GeoJSON object. DD-API uses Point and Multi-Point locations, but is not restricted to these two.
        type: Geometry | nil
      properties?:
        description: The attributes of Location object are placed within the properties group of the GeoJSON object.
        type: object
        properties:
          node?: Node
          url?: string
          locationId?: string
          locationCode?: string
          referenceLevel?:
            description: GeoJSON element. Specifies the reference plane for the altitude coordinates (third). For example "NAP"
            type: string
          crs?:
            description: GeoJSON element. According to GeoJSON the coordinate reference system element is only included when it is not "WGS84" (default).
            type: string
          locationName?: LocationName
          locationNameSpace?:
            type: LocationNameSpace
          displayNameDetail?:
            type: LocationName
            description: Remark, Only used in dd-oper response.
          displayNameGlobal?:
            type: LocationName
            description: Remark, Only used in dd-oper response.
          displayNameSpace?:
            type: LocationNameSpace
            description: Remark, Only used in dd-oper response.
          parentName?:
            type: LocationName
            description: Remark, Only used in dd-oper response.

  LocationName:
    type: string
    example: "Hoek-van-Holland"

  LocationNameSpace:
    type: string
    example: "NL.RWS.WM"

  Node:
    description: Node objects contain the properties of the data node. A node is an operational implementation of the Digital Delta specification.
    type: object
    properties:
      id?:
        type: Identifier
      name:
        type: string
        description: The name of the node.<br/>
      description?:
        type: string
        description: The description of the node.
      baseUrl?:
        type: string
        description: The base URL of the node.

  ObservationType:
    description: Generic DD API 2.0 parameter object. DD-OPER API response returns a subset of the attributes.
    type: object
    properties:
      node?: Node
      url?: Url
      id?: Identifier
      quantityName?:
        description: Composed name of the quantity(.parameterCode) that was measured or computed.
          Remark Only used in dd-oper response.
        type: QuantityName
      parameterCode?:
        description: Parameter code specifying the observationtype. Non-biological observation types follow the Aquo standards.
        type: string
      description?: string
      quantity?: string
      unit?: string
      compartment?:
        description: The compartment in which the measurement/computationt is available. Standardised Aquo compartments.
        type: string
        examples: [ "OW", "DL", "GW", "LW" ]
      aspectSet?:
        description: Optional, currently only provided and used by RWS.
        type: AspectSet

  PageLinks:
    description: The object contains urls and page size information to support back and forward paging
    type: object
    properties:
      totalObjectCount?:
        description: The actual number of objects available. When paging is used the response contains a subset of the total obejcts available up to the max page size.
        type: integer
      maxPageSize?:
        description: Maximum number of objects in the response. Defined by the Provider of the response.
        type: PageSize
      minPageSize?:
          description: Minimum number of objects in the response. Defined by the Provider of the response.
          type: PageSize
          minimum: 1
      self?: Url | nil
      first?: Url | nil
      prev: Url | nil
      next: Url | nil
      last?: Url | nil

  PageNumber:
    description: Page number in case the response is seprated in different pages.
    type: integer
    minimum: 1
    example: 1

  PageSize:
    description: Number of result objects per a single response page. Used for minimum, maximum and/or actual.
    type: integer
    minimum: 1
    maximum: 10000
    example: 10

  PointsValue:
    type: object
    properties:
      coordinates: Position
      value?:
        description: The 'value', 'quantity' and 'additionalQuality' can be returned at this level (Event object) in case the AspectSet and/or Point nestings would be redundant and introduce unnecesssary levels in the response
        type: number
      quality?:
        description: See also value attribute.
        type: number
      additionalQuality?:
        description: See also value attribute.
        type: number

  Position:
    description: |
      A location specified in an array with longitude, lattitude and optional altitude.
    type: Double[]
    minItems: 2
    maxItems: 3
    example: [4.234 , 5.23423]

  Positions:
    description: An array of Positions to specify a MultiPpoint location.
    type: Position[]
    minItems: 0
    examples:
      -multipoint: [[4.2, 52.0], [3.2, 52.3,0]]

  Problem:
    description:  Error response in line with RFC7807. Although both optional the minimum information that should be given are the title and status.
    type: object
    properties:
      type?: Url
      title?: string
      status?:
        type: integer
        description: The HTTP errrocode number.
      detail?: string
      instance?: string | nil
    # Additional fields, RFC7807 extension
      errors?:
        description: Error details.
        type: FilterError[]
      typeinfo?:
        description: Link to information on the type of error.  ??? Why not use 'type'. is link according RFC7807
        type: string | nil

  ProcessName:
    type: string
    description: The name of the mechanism to collect/derive the timeseries value.
      When accessing RWS' DD-API, providing a processName as query parameter is required. The process names are pre-defined (see examples).
      Extending the processname with a suffix, referencing a more detailed mechanism like a specific calculation model, is not allowed.
      Other implementions dot need to implement this query-parameter.
    example: measurement, forecast, astronomical, advise

  Provider:
    type: object
    description: Information regarding the system that is responible for the response.
      Provides support contact information in case there are issues with response format or content.
    properties:
      name?: string
      supportUrl?: string
      apiVersion?: string
      responseType?: string
      responseTimestamp?:
        type: Timestamp
        description: Timestamp when this response was created.

  Quality:
    type: integer

  QuantityName:
    type: string
    description: A name referencing a category of timeseries. The quantity names are predefined.
      For example 'WaterLevel', 'WaterTemperature', 'WaveHeight'.
    example: WaterLevel

  Source:
    description: Describes the type of data in the time series, and the owner of the data.
    type: object
    properties:
      process: ProcessName
      name?:
        type: SourceName
        description: A name describing the source, e.g. a model name.
      description?:
        type: string
        description: Additional description of the data source (might contain a URL to a site with information on the model).
      realizationCount?:
        type: integer
        description: if present, and larger then 1, the results are part of an ensemble run
      institution: Institution

  SourceName:
    type: string
    description: A name describing the source, e.g. a model name
    example: rws_prediction

  StartTime:
    type: datetime
    example: 2016-01-01T12:45:00Z
    description:  Start date/time of the timeseries, or the Start date/time of the interval for an individual value in the series. Uses the UCT (Zulu) notation.

  Timeseries:
    description: Generic DD API 2.0 timeseries object.DD API 'OPER' response returns a subset of the attributes.
    type: object
    properties:
      node?: Node
      url?: string
      id?: Identifier
      source: Source
      location: Location
      observationType: ObservationType
      startTime: datetime
      endTime: datetime
      analysisTime?: datetime
      realization?: number
      events?:
        type: Event[]
        description: If no startTime and no endTime are provided in the /timeseries-query, only meta-data is provided,
          so the events are not present.

  Timestamp:
    type: string
    description: Date and time in format "yyyy-mmm-ddThh:mm:ss.ffffffZ"  (UTC Zulu with minimal 3 digits of fractional seconds)
    example: "2018-07-05T15:11:36.123Z, 2018-07-05T15:11:36.123456Z, 2018-07-05T15:11:36.000Z"
    minLength: 24

  Url:
    type: string
    description: Correctly formatted url reference.

  Uuid:
    type: string
    pattern: "[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}"
    description: Unique identifier for the datasource. Version 4.
    example: 978fdf5c-95c8-43a5-82ff-d27d9e6d685f




# response types
#
#  The repsonse layouts are of Location object are similar to DD API 1.9 definition except that not all atttributes that are returned,
#  and DD-strict has additional location properties that are not par of the DD API 1.9 specification.

#  LocationListResponse:
#    description: Contains zero or more responses to a Node list request.
#    type: object
#    properties:
#      provider:
#        type: Node
#        description: Reference to the responsible provider for the response.
#     node: Node
#      results:
#        type: Location[]
#        description: List of Location objects
#      count?:
#        description: Number of records satisfying the query parameters.
#        type: integer
#        example: 1123


#  ProblemResponse:
#    description:
#    type: object
#    properties:
#      provider:
#        type: Provider
#      problem:
#        type: Problem
