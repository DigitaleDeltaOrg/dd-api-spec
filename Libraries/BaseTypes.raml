#%RAML 1.0 Library
# Base types.
types:
  Double:
    description: A value of type Double (float).
    type: number
    format: double

  KeyValuePair:
    description: A combination of key and value.
    properties:
      key:
        type: string
        description: The key of the key/value pair.
        example: taxontype
      value:
        type: string
        description: The value of the key/value pair.

  Geometry:
    description: A geometry in GeoJSON format. Digital Delta currently only supports the Point type.
    properties:
      type:
        description: The geometry type. Must have the value "Point".
        type: string
        example: "Point"
      coordinates:
        type: Double[]
        description: An array of doubles, representing a coordinate.
        example: [ 4.234, 52.3423 ]

  Node:
    description: Node objects contain the properties of the data node. A node is an operational implementation of the Digital Delta specification.
    type: object
    properties:
      uuid:
        type: string
        required: true
        pattern: "[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}"
        description: The unique identifier of the node. UUID Version 4.<br/>
          Qualifiers&colon; <font color=gray><strike>Nullable</strike></font>, <font color=gray><strike>Filterable</strike></font>.
        example: 978fdf5c-95c8-43a5-82ff-d27d9e6d685f
      name:
        type: string
        required: true
        description: The name of the node.<br/>
          Qualifiers&colon; <font color=green>Nullable</font>, <font color=green>Filterable</font>.
      description:
        type: string
        required: true
        description: The description of the node.<br/>
          Qualifiers&colon; <font color=green>Nullable</font>, <font color=gray><strike>Filterable</strike></font>.
      baseUrl:
        type: string
        required: true
        description: The base URL of the node.

  Location:
    displayName: Location
    description: A location object contains all information required to describe a location. This version contains a node.
    type: object
    properties:
      uuid:
        type: string
        pattern: "[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}"
        description: The unique identifier for the location. UUID Version 4.<br/>
          Qualifiers&colon; <font color=gray><strike>Nullable</strike></font>, <font color=gray><strike>Filterable</strike></font>.
      url:
        type: string
        description: The URL of the location.
      code:
        type: string
        description: The code of the location.<br/>
          Qualifiers&colon; <font color=green>Nullable</font>, <font color=green>Filterable</font>.
      name:
        type: string
        description: The name of the location..<br/>
          Qualifiers&colon; <font color=green>Nullable</font>, <font color=green>Filterable</font>.
      geometry:
        type: Geometry
        description: The GeoJSON geometry definition of the location..<br/>
          Qualifiers&colon; <font color=gray><strike>Nullable</strike></font>, <font color=green>Filterable</font>.
      node:
        type: Node
        description: The node of the location..<br/>
          Qualifiers&colon; <font color=gray><strike>Nullable</strike></font>, <font color=green>Filterable</font>.

  Datasource:
    displayName: DataSource
    description: DataSource (“bronhouder” in Dutch) objects describe the source of the data. A node can have multiple data sources.
    type: object
    properties:
      uuid:
        type: string
        required: true
        pattern: "[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}"
        description: The unique identifier for the datasource. UUID Version 4<br/>
          Qualifiers&colon; <font color=gray><strike>Nullable</strike></font>, <font color=gray><strike>Filterable</strike></font>.
      name:
        type: string
        required: true
        description: The name of the datasource..<br/>
          Qualifiers&colon; <font color=gray><strike>Nullable</strike></font>, <font color=green>Filterable</font>.
      node:
        type: Node
        required: true
        description: The node of the datasource.

  ObservationType:
    description: The ObservationType objects describe all attributes to correctly interpret what has been measured, and in what way. It is essential to have the quantity field.
    type: object
    properties:
      uuid:
        type: string
        required: true
        pattern: "[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}"
        description: The unique identifier for the observationtype. UUID Version 4.
      quantity:
        type: string
        examples: [ "ZICHT", "MONSTER", "CONCTTE", "AANTL" ]
        required: true
        description: Defines what was measured. <br/>
          Qualifiers&colon; <font color=green>Nullable</font>, <font color=green>Filterable</font>.
      unit:
        type: string
        examples: [ "cm2", "n", "n/m3", "%", "DIMSLS", "C" ]
        required: true
        description: Unit of measurement. Follows the Aquo standards.
      parameterCode:
        type: string
        required: false
        examples: [ "Pediastrum", "Ca", "1112T4ClC2a", "HYBDVS" ]
        description: Parameter code specifying the observationtype. Non-biological observation types follow the Aquo standards.<br/>
          Qualifiers&colon; <font color=green>Nullable</font>, <font color=gray><strike>Filterable</strike></font>.
      compartment:
        type: string
        required: false
        examples: [ "OW", "DL", "GW", "LW" ]
        description: The compartment in which the measurement took place. Standardised Aquo compartments.<br/>
          Qualifiers&colon; <font color=green>Nullable</font>, <font color=gray><strike>Filterable</strike></font>.
      qualifier:
        type: string
        required: false
        examples: [ "AD", "JU", "T20C", "KO", "BraunBS", "WATSGL", "WATKLM" ]
        description: Dutch&colon; 'Hoedanigheid'. Additional qualities of the measurement. <br/>
          Qualifiers&colon; <font color=green>Nullable</font>, <font color=gray><strike>Filterable</strike></font>.
      extra:
        type: KeyValuePair[]
        required: false
        example: [
          {
            "key": "taxongroup",
            "value": "DIATM"
          },
          {
            "key": "type",
            "value": "Biotaxon"
          }
        ]
        description: Extra information about the measurement. Can be used to provide specific details concerning the circumstances or the object measured, etc.

  MinimalEvent:
    displayName: Event (minimal)
    description: Event objects contain the actual value of each observation.
      Each observation contains a time stamp and a value.
    properties:
      value:
        type: number
        required: true
        example: 37.0
        description: The value of the measured data.<br/>
          Qualifiers&colon; <font color=green>Nullable</font>, <font color=gray><strike>Filterable</strike></font>.
      timeStamp:
        type: datetime
        required: false
        example: 2016-12-31T12:45:00Z
        description: The date/time when the measurement took place. Uses the Zulu notation.

  Event:
    type: MinimalEvent
    displayName: Event (detailed)
    description: Event objects contain the actual value of each observation.
      Each observation contains a time stamp and a value. There is an optional quality parameter and limit symbol.
    properties:
      quality:
        type: string
        required: false
        example: "99"
        description: As specified in Aquo Domain Table 'Kwaliteitsoordeel'. Specifies whether the value is considered normal, abberent, interpolated, etc. and for what reason. .<br/>
          Qualifiers&colon; <font color=green>Nullable</font>, <font color=gray><strike>Filterable</strike></font>.
      limitSymbol:
        type: string?
        required: false
        examples: ["<", ">", "="]
        description: The limit symbol supplements the measured value.<br/>
          Qualifiers&colon; <font color=green>Nullable</font>, <font color=gray><strike>Filterable</strike></font>.

  TimeseriesType:
    description: TimeSeriesType objects describe the type of measurement the timeseries contains.
      These can be for example raw measurements, but also aggregations or simulations.
      This information could be needed to correctly interpret the measurement values.
    type: object
    properties:
      code:
        type: string
        required: true
        example: MEAS
        description: The code of the timeseries type.
      name:
        type: string
        required: true
        example: Measurement
        description: The name of the timeseries type.

  Timeseries:
    description: Timeseries objects contain all information needed to interpret timeseries.<br/>
      There are references to other objects, such as Node, Location, DataSource, ObservationType and TimeseriesType.<br/>
      The TimeseriesType should be added as a reference because it can indicate if a timeseries containts a RAW dataset or makes use of the current measurements.
      The Digital Delta specification of timeseries makes no assumptions on the nature of the series, timeseries may describe any series of data points of the same observation type and datasource in time on one location.<br/>
      This includes both equidistant series (fixed time interval between data points) and non-equidistant series (with varying time interval).
      <h3>Use case&colon;</h3>
      <p>Imagine a data-source is providing several timeseries for a specific location and observation. For example&colon;<br/>
      Waterlevel is measured every 5 minutes for the location Lobith.
      This is the original timeseries from the datasource and we can call it the RAW timeseries or the original timeseries.<br/>
      Within the same data-souce, again, waterlevel is measured every 5 minutes for the same location, but this timeseries is a manually or automatically validated timeseries. So in this case we have an original timeseries which is providing the raw data and another timeseries which has been validated. Both timeseries can be required for different purposes.<br/>
      Now imagine that someone requires the validated timeseries instead of the original. <br/>
      The users should be able to filter them based on this information and retrieve data only for this type of timeseries. There are several more uses cases where more than two types are used. Think of timeseries that are recalculated based on validation, interval, aggregation, etc.<br/><br/>
      Using TimeSeriesType is providing more flexibility in providing multiple timeseries for the same location and observation type provided by a single data-source.</p>
    type: object
    properties:
      url:
        type: string
        required: true
      uuid:
        type: string
        required: true
        pattern: "[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}"
        description: The unique identifier for the timeseries. UUID Version 4.<br/>
          Qualifiers&colon; <font color=gray><strike>Nullable<strike></font>, <font color=gray><strike>Filterable</strike></font>.
        example: f4af47f5-f087-494c-9b2d-ba129bddd545
      qualifier:
        type: string
        required: false
        description: The qualifier of the timeseries. AquaDesk uses the uuid for this.<br/>
          Qualifiers&colon; <font color=gray><strike>Nullable<strike></font>, <font color=green>Filterable</font>.
        example: H.Meting
      location:
        type: Location
        required: true
        description: The location that the timeseries uses.<br/>
          Qualifiers&colon; <font color=gray><strike>Nullable</font>, <font color=green>Filterable</font>.
      observationType:
        type: ObservationType
        required: true
        description: The observationtype that the timeseries uses.<br/>
          Qualifiers&colon; <font color=gray><strike>Nullable</strike></font>, <font color=green>Filterable</font>.
      node:
        type: Node
        required: true
        description: The node responsible for hosting the data for the timeseries.<br/>
          Qualifiers&colon; <font color=gray><strike>Nullable</strike></font>, <font color=green>Filterable</font>.
      datasource:
        type: Datasource
        required: true
        description: The datasource providing the data for the timeseries..<br/>
          Qualifiers&colon; <font color=green>Nullable</font>, <font color=green>Filterable</font>.
      timeseriesType:
        type: TimeseriesType
        required: true
        description: The type of the timeseries..<br/>
          Qualifiers&colon; <font color=green>Nullable</font>, <font color=green>Filterable</font>.
      interval:
        type: number?
        required: false
        description: Specifies the interval between measurements for the timeseries.<br/>
          Qualifiers&colon; <font color=green>Nullable</font>, <font color=gray><strike>Filterable</strike></font>.
      valueType:
        type: string
        required: false
        description:  The data type of the measured data.<br/>
          Qualifiers&colon; <font color=gray><strike>Nullable</strike></font>, <font color=green>Filterable</font>.
      start:
        type: datetime
        required: true
        example: 2016-01-01T12:45:00Z
        description:  Start date/time of the measurement. Uses the Zulu notation<br/>
          Qualifiers&colon; <font color=green>Nullable</font>, <font color=green>Filterable</font>.
      end:
        type: datetime
        required: true
        example: 2016-01-01T12:45:00Z
        description:  End date/time of the measurement. Uses the Zulu notation<br/>
          Qualifiers&colon; <font color=green>Nullable</font>, <font color=green>Filterable</font>.
      events?:
        type: MinimalEvent[] | nil
        description: Defines a minimal event.
