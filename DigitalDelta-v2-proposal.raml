#%RAML 1.0
title: Digitale Delta - API
version: 1.9
securitySchemes:
  basic:
    type: Basic Authentication
baseUri: http://api.rws.nl/dl/
mediaType: [ application/json ]
description: Digital Delta API version 1.9
documentation:
 - title: Introduction
   content: The Digital Delta is a distributed network in which various datasources exchange information using a standard interface.
     This specification outlines the mechanics of the Digital Delta as a distributed network of nodes and masternodes and describes the technical specification of the Digital Delta web service API.<br/>
     This document uses the <a href="http://raml.org">RAML standard</a> as the definition language.<br/>
 - title: The API specification
   content:
     The API specification consists of two parts.
     <ol>
       <li>The Types section describes the data types that are available for the resources. Please refer to figure 1 below for the resource object diagram.
       <br/><i>Note&colon; Currently, the generated HTML documentation does not contain tables that describe the data types. However, their content can be seen in the response tabs of the requests. If you want to have a detailed look at the type definitions, open the RAML file and go to the “# Base types.” section.</i>
       </li>
       <li>The Resources section describes the available end-points.</li>
     </ol>

     <p/>
     <p><i>Todo update figure from 1.0 to 1.9</i></p>
     <p><i>Figure 1</i></p>
     <p/>

     <p>The Digital Delta use ID's for identification of resource objects. Although every data node is free to provide an ID that is only unique to its own data, it is strongly recommended that it uses uuids (universally unique identifier, version 4). The use of uuids guarantees a unique identifier for an instance over all nodes in the Digital Delta without the need for individual nodes to have a knowledge about data in other nodes.<br/>
     The Digital Delta supports timeseries data, defined as a measurement series with a begin and end time, a fixed location and a so called observation type (usually a quantity, often in combination with a parameter). <br/>
     The list of resource objects is setup to be extendable to other data types, such as raster or vector data.<br/>
     The protocols provides by the services are HTTP and HTTPS. Currently authentication is Anonymous, but a specification based on OAuth2 and OpenID Connect is being elaborated.<br/>
     The Digital Delta only supports JSON as the output format and for POST request bodies.</p>
 - title: About the examples in this document
   content:
    The examples in the requests are mostly based on the AquaDesk implementation of the DD-API specifications. The structure, however, for all gets, posts and responses will be the same for all providers.
 - title: Future enhancements
   content:
     The following future enhancements are under consideration.
     <ul>
      <li>Authentication/Authorisation</li>
      <li>Error and warning codes. (See object type Problem below for drafted solution) </li>
      <li>Extension for ecological data (DD-ECO-API)</li>
    </ul>
 - title: Future research
   content:
     The following topics will be part of future research
     <ul>
       <li>Add attributes to different standards</li>
       <li>Support for other data types (especially grids)</li>
     </ul>
 - title: Document history
   content:
     <table>
      <tr>
        <th width=150>Date</th>
        <th width=300>Author</th>
        <th>Changes<th>
      </tr>
      <tr>
        <td>until 2017-12-14</td>
        <td>Geri Wolters / Stef Hummel</td>
        <td>
          Specification of DD-API version 1.0
        </td>
      </tr>
      <tr>
        <td>2018-06-08</td>
        <td>Jurgen G Boerboom / Stef Hummel</td>
        <td>
          Specification of DD-API version 1.9
        </td>
      </tr>
      <tr>
        <td>2018-06-11</td>
        <td>Jurgen G Boerboom</td>
        <td>
          Textual updates and removal of syntax errors, still DD API version 1.9
        </td>
      </tr>
      <tr>
        <td>2018-06-21</td>
        <td>Jurgen G Boerboom</td>
        <td>
          Optional request parameters should not have a default value. Removed default from 'process'
        </td>
      </tr>
     </table>
# HTTP is included as protocol but is optional as for security reasons a Provider might decide to support HTTPS only.
protocols:
  - HTTP
  - HTTPS

# Generic DD API datatypes
types:

  AdditionalQuality:
    type: null
    description:

  Altitude: number

  Aspect:
    description: A matematical derived variant of a specific measurement, forecast, etc.
    type: object
    properties:
      name: string
      unit: string

  AspectSet:
    description: The AspectSet defines a group of related mathematical values for a single measurement, forecast, etc
    type: object
    properties:
      name: AspectSetName
      aspects:
        type: Aspect[]
        minItems: 0

  AspectSetName:
    description:
    type: string
    properties:
      default: "standard"
      example: "minimum, maximum, standard, ...."

  AspectPointsValue:
    description: Object used for Event.Aspect.Points. Specifies the values in points array in context of Aspect name.
    type: object
    properties:
      name:
        type: string
        description: Name of aspect.
      points: PointsValue[]

  AspectValue:
    description: Object used for Event.Aspect[] results. Specifies the value in context of Aspect name.
    type: object
    properties:
      name:
        type: string
        description: Name of aspect.
      value: number
      quality?: number
      additionalQuality?: number

# BB is not required as object since bbox is only used as query parameter (toch maar laten staan? SH)
  BoundingBox:
    description: The specification of a bounding box using the longitude and latitiude of the most SouthWest point followed by the most NorthEast points (GeoJSON).
    type: Double[]
    minItems: 4
    maxItems: 4
    examples:
      -bbox: [ 4.123456, 52.123456, 10.123456, 55.123456 ]

  Coordinate:
    type: number
    format: double

  Double:
    description: A value of type Double (todo specify #digits/format?).
    type: number
    format: double

  EndTime:
    type: datetime
    example: 2018-01-01T00:00:00Z
    description:  The End date/time of the timeseries, or the End date/time of the interval for an individual value in the series. Uses the UCT (Zulu) notation.
      The endtime is exlusive, hence the requested period ends just before the given time.
      2018-01-01T00:00:00Z - 2018-01-01T00:00:10Z  specifies a 10 minute period starting at midnight and
      ending at 2018-01-01T00:09:59.99999Z

  Event:
    description: In case of scalar time series the event contains time stamp and value, optionally extended with
      an interval specification (startTime/endTime/resultTime), and a quality indication (quality, additionalQuality).
      In case of a timeseries with Aspects or with values on multiple points, the events contains object for the aspects or points.
    type: object
    properties:
      timeStamp?: datetime
      startTime?: StartTime
      endTime?: EndTime
      resultTime?: datetime
      value?:
        description: The 'value', 'quantity' and 'additionalQuality' can be returned at this level (Event object) in case the AspectSet and/or Point nestings would be redundant and introduce unnecesssary levels in the response
        type: number
      quality?:
        description: See value attribute.
        type: number
      additionalQuality?:
        description: See also value attribute.
        type: number
      aspects?:
        type: AspectValue[] | AspectPointsValue []
        description: When Aspects are used the value/quality/unit are given in and object for each aspect or aspect+point.
      points?:
        type: PointsValue[]
        description: When multiple positions are involved the value/quantity/unit are given in context of each position.

  Geometry:
    description: A geometry in GeoJSON format. Digital Delta currently only supports the Point and MultiPoint types.
    type: object
    properties:
      type:
        description: The geometry type. Must have the value "Point" or "MultiPoint".
        type: string
        example: "Point"
      coordinates?:
        description: An array of doubles, representing a Longitude, Latitude and optional Altitude.
        type: Position | Positions
        examples:
          -point:  [4.234 , 5.23423]
          -multipoint:  [[4.2, 52.0], [3.2, 52.3,0]]

  Identifier:
    type: string | Uuid
    description: An uuid or a preferably human readable identifier.

  Institution:
    type: object
    properties:
      name:
        type: string
        description: The name of the institution that produced and/or owns the data
      description:
        type: string
        description: Additional discription of the institution

# IntervalLength is not required as object since it is only used as query parameter (toch maar laten staan? SH)
  IntervalLength:
    default: 10min

  Location:
    description: Generic DD API 2.0 Location object structure that is used by /dd and /dd-oper. Most attributes are optional as the content returned in the response depends on the request.  Location attributes are placed within the properties group of the GeoJSON  object.
    properties:
      type:
        description: Type of GeoJSON object. In the DD-API the only allowed type is "Feature"
        type: string
        enum: ["Feature"]
      geometry:
        description: The coordinate(s) of the Location are placed within the "geometry" section of the GeoJSON object. DD-API uses Point and Multi-Point locations, but is not restricted to these two.
        type: Geometry?
      properties?:
        description: The attributes of Location object are placed within the properties group of the GeoJSON object.
        type: object
        properties:
          node?: Node
          url?: string
          locationId?: string
          locationCode?: string
          locationName?: LocationName
          referencelevel?:
            description: GeoJSON element. Specifies the reference plane for the altitude coordinates (third). For example "NAP"
            type: string
          crs?:
            description: GeoJSON element. According to GeoJSON the coordinate reference system element is only included when it is not "WGS84" (default).
            type: string
          locationNameSpace?:
            type: LocationNameSpace
            description: Remark: Only used in dd-oper response.
          displayName?: LocationName
            type: LocationName
            description: Remark: Only used in dd-oper response.
          displayNameSpace?:
            type: LocationNameSpace
            description: Remark: Only used in dd-oper response.
          parentName?: LocationName
            type: LocationName
            description: Remark: Only used in dd-oper response.

  LocationName:
    type: string
    example: "Hoek-van-Holland"

  LocationNameSpace:
    type: string
    example: "NL.RWS.WM"

  Node:
    description: Node objects contain the properties of the data node. A node is an operational implementation of the Digital Delta specification.
    type: object
    properties:
      id:
        type: Identifier
      name:
        type: string
        description: The name of the node.<br/>
      description?:
        type: string
        description: The description of the node.
      baseUrl:
        type: string
        description: The base URL of the node.

  ObservationType:
    description: Generic DD API 2.0 parameter object. DD API 'Strict' response returns a subset of the attributes.
    type: object
    properties:
      node?: Node
      url?: string
      id?: string
      quantityName?:
        description: Composed name of the quantity(.parameterCode) that was measured or computed.
          Remark: Only used in dd-oper response.
        type: QuantityName
      parameterCode?:
        description: Parameter code specifying the observationtype. Non-biological observation types follow the Aquo standards.
        type: string
      description?: string
      quantity?: string
      unit?: string
      compartment?:
        description: The compartment in which the measurement/computationt is available. Standardised Aquo compartments.
        type: string
        examples: [ "OW", "DL", "GW", "LW" ]
      aspectSet?:
        description: Optional, currently only provided and used by RWS.
        type: AspectSet

  PageLinks:
    description: The object contains urls and page size information to support back and forward paging
    type: object
    properties:
      count?:
        description: The actual number of results returned by the response.
        type: integer
      maxPageSize?: integer
      minPageSize?:
          type: integer
          default: 1
      self?: Url | nil
      first?: Url | nil
      prev: Url | nil
      next: Url | nil
      last?: Url | nil

  PageNumber:
    description: Page number
    type: integer
    minimum: 1
    example: 1

  PageSize:
    description: Number of results
    type: integer
    minimum: 1
    maximum: 10000
    example: 10

  PointsValue:
    type: object
    properties:
      points: Position
      value?:
        description: The 'value', 'quantity' and 'additionalQuality' can be returned at this level (Event object) in case the AspectSet and/or Point nestings would be redundant and introduce unnecesssary levels in the response
        type: number
      quality?:
        description: See also value attribute.
        type: number
      additionalQuality:
        description: See also value attribute.
        type: number


  Position:
    description: |
      A location specified in an array with longitude, lattitude and optional altitude.
    type: Double[]
    minItems: 2
    maxItems: 3
    example: [4.234 , 5.23423]

  Positions:
    description: An array of Positions to specify a MultiPpoint location.
    type: Position[]
    minItems: 0
    examples:
      -multipoint: [[4.2, 52.0], [3.2, 52.3,0]]

  Problem:
    description:  Error response in line with RFC7807. Although both optional the minimum information that should be given are the title and status.
    type: object
    properties:
      type?: Url
      title?: string
      status?:
        type: number
        description: The HTTP errrocode number.
      detail?: string
      instance?: string

  ProcessName:
    type: string
    description: The name of the mechanism to collect/derive the timeseries value.
      When accessing RWS' DD-API, providing a processName as query parameter is required. The process names are pre-defined (see examples).
      Extending the processname with a suffix, referencing a more detailed mechanism like a specific calculation model, is not allowed.
      Other implementions dot need to implement this query-parameter.
    example: measurement, forecast, astronomical, advise

  Provider:
    type: object
    description: Information regarding the system that is responible for the response.
      Provides support contact information in case there are issues with response format or content.
    properties:
      name?: string
      supportUrl: string

  Quality:
    type: number

  QuantityName:
    type: string
    description: A name referencing a category of timeseries. The quantity names are predefined.
      For example 'WaterLevel', 'WaterTemperature', 'WaveHeight'.
    example: WaterLevel

  Source:
    description: Describes the type of data in the time series, and the owner of the data.
    type: object
    properties:
      process: ProcessName
      name?:
        type: SourceName
        description: A name describing the source, e.g. a model name.
      description?:
        type: string
        description: Additional description of the data source (might contain a URL to a site with information on the model).
      realizationCount?:
        type: integer
        description: if present, and larger then 1, the results are part of an ensemble run
      institution: Institution

  SourceName:
    type: string
    description: A name describing the source, e.g. a model name
    example: rws_prediction

  StartTime:
    type: datetime
    example: 2016-01-01T12:45:00Z
    description:  Start date/time of the timeseries, or the Start date/time of the interval for an individual value in the series. Uses the UCT (Zulu) notation.

  Timeseries:
    description: Generic DD API 2.0 timeseries object.DD API 'Strict' response returns a subset of the attributes.
    type: object
    properties:
      node?: Node
      url?: string
      id?: Identifier
      source: Source
      location: Location
      observationType: ObservationType
      startTime: datetime
      endTime: datetime
      analysisTime?: datetime
      realization?: number
      ### TODO: de diverse events response types
      events?:
        type: Event[]
        description: If no startTime and no endTime are provided in the /timeseries-query, only meta-data is provided,
          so the events are not present.
    examples:

  Url:
    type: string
    description: Correctly formatted url reference.

  Uuid:
    type: string
    pattern: "[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}"
    description: Unique identifier for the datasource. Version 4.
    example: 978fdf5c-95c8-43a5-82ff-d27d9e6d685f



# response types
#
#  The repsonse layouts are of Location object are similar to DD API 1.9 definition except that not all atttributes that are returned,
#  and DD-strict has additional location properties that are not par of the DD API 1.9 specification.

  AspectSetListResponse:
    description: The list of available AspectSets.
    type: object
    properties:
      provider:
        type: Provider
      _links?:
        type: PageLinks
      results:
        type: AspectSet[]
        description: List of AspectSets.

  LocationListResponse:
    description: Contains zero or more responses to a Location list request.
    type: object
    properties:
      provider:
        type: Provider
        description: Reference to the responsible provider for the response.
      _links?:
        type: PageLinks
      results:
        type: Location[]
        description: List of Location objects

  LocationResponse:
    description: Contains the response for one Location.
    type: object
    properties:
      provider:
        type: Provider
        description: Reference to the responsible provider for the response.
      results:
        type: Location
        description: Specific location

  NodeListResponse:
    description: Contains zero or more responses to a Node list request.
    type: object
    properties:
      provider:
        type: Provider
      _links?:
        type: PageLinks
      results:
        type: Node[]
        description: List of Node objects

  NodeResponse:
    description: Contains the response for one Location.
    type: object
    properties:
      provider:
        type: Provider
        description: Reference to the party/system responsible for the response.
      results:
        type: Node
        description: A single Node object.

  ObservationTypeListResponse:
    description:
    type: object
    properties:
      provider:
        type: Provider
      _links?:
        type: PageLinks
      results:
        type: ObservationType[]
        description: List of ObservationType objects

  ObservationTypeResponse:
    description:
    type: object
    properties:
      provider:
        type: Provider
      results:
        type: ObservationType
        description: Specific ObservationType object

  SourceListResponse:
    description: Contains zero or more responses to a Source list request.
    type: object
    properties:
      provider:
        type: Provider
      _links?:
        type: PageLinks
      results:
        type: Source[]
        description: List of Datasource.

  TimeseriesListResponse:
    description:
    type: object
    properties:
      provider:
        type: Provider
      _links?:
        type: PageLinks
      results:
        type: Timeseries[]
        description: List of Timeseries objects

  TimeseriesResponse:
    description:
    type: object
    properties:
      provider:
        type: Provider
      results:
        type: Timeseries
        description: Specific Timeseries object

  ProblemResponse:
    description:
    type: object
    properties:
      provider:
        type: Provider
      problem:
        type: Problem
        description:

# de resources
/dd/1.9:
  description:
    A 1.9 version has been defined as draft for 2.0. Experiences with implementing 1.9 on Matroos might lead to a slightly adjusted 1.9

###################################################

  /nodes:
    description: The Nodes endpoint returns the nodes that the provider offers.
    get:
      queryParameters:
        process?:
          type: ProcessName
        name?:
          type: string
          description: (Partial) name of the node. (Partional meaning startsWith(...)
          example: AquaDeskPrimaryNode
        page?: PageNumber
        pageSize?: PageSize
      responses:
        200:
          description: |
            Succesfully retrieved resource
          body:
            application/json:
              type: NodeListResponse
              example:
                !include examples/sample_dd-nodelist-response.json
    /{nodeId}:
      description: Request a specific Location by its unique dentifier.
      uriParameters:
        nodeId:
          type: Identifier
      get:
        queryParameters:
          process?:
            type: ProcessName
        responses:
          200:
            description: |
              Succesfully retrieved resource
            body:
              application/json:
                type: NodeResponse
                example:
                  !include examples/sample_dd-node-response.json
          404:
            body:
              application/json:
                type: ProblemResponse
                example:
                  !include examples/sample_dd-error-response.json

###################################################

  /sources:
    description: Retrieve (data)source resources.
    get:
      queryParameters:
        process?:
          type: ProcessName
      responses:
        200:
          description: Succesfully retrieved resource
          body:
            application/json:
              type: SourceListResponse
              example:
                !include examples/sample_dd-sourcelist-response.json
        404:
          description:
            No data returned due to error. Information regarding the issues is returned as Problem object.
          body:
            application/json:
              type: ProblemResponse
              example:
                !include examples/sample_dd-error-response.json

######################################################

  /locations:
    get:
      description: |
        Retrieve resource
      queryParameters:
        process?:
          type: ProcessName
        boundingBox?:
          type: BoundingBox
          example: [4.8, 52.0, 5.8, 54.0]
        locationName?:
          type: string
          description: (Partial) location name. (Partional meaning startsWith(...)
          example: NEDHMT
        nodeId?:
          type: Identifier
          description: This query parameter is deprecated
        locationCode?:
          type: string
          description: Location code.
          example: NLWATB-RWTS_AFGDM_0001
        locationId: Identifier
#        locationFilter:
#          type: Filter
#          required: false
        page: PageNumber
        pageSize: PageSize
      responses:
        200:
          description: |
            Succesfully retrieved resource
          body:
            application/json:
              type: LocationListResponse
              example:
                !include examples/sample_dd-locationslist-response.json
    /{locationId}:
      description: Request a specific location by its id.
      uriParameters:
        locationId:
          type: Identifier
      get:
        description: |
          Request a specific Location by its unique dentifier.
        queryParameters:
          process?:
            type: ProcessName
            default: measurement
        responses:
          200:
            description: |
              Succesfully retrieved resource
            body:
              application/json:
                type: LocationResponse
                example:
                  !include examples/sample_dd-location-response.json
          404:
            body:
              application/json:
                type: ProblemResponse
                example:
                  !include examples/sample_dd-error-response.json

######################################################

  /aspectSets:
    description:
      Retrieves available aspect sets.
      Note - The request requires some parameters to provide a context for the response as aspects relate to observation types for instance.
    get:
      queryParameters:
        process?:
          type: ProcessName
      responses:
        200:
          description: |
            Succesfully retrieved resource
          body:
            application/json:
              type: AspectSetListResponse
              example:
                !include examples/sample_dd-aspectsetlist-response.json

######################################################

  /observationTypes:
    description: The ObservationTypes endpoint can return the observationtypes that the provider offers. Filtering&colon; list of parameters.
      <h3>About ObservationType</h3>
      <p>The ObservationType objects describe all attributes to correctly interpret what has been measured, and in what way. It is essential to have the quantity field.</p>
    get:
      description: |
        Retrieve observationTypes resource:
      queryParameters:
        process?:
          type: ProcessName
        observationTypeId?:
          type: Identifier
        quantity?:
          description: Retrieve only observation types that contain the specified quantity.
          type: string
        parameterCode?:
          description: Retrieve only observation types that contain the specified parameter code.
          type: string
#        observationTypeFilter:
#          type: Filter
#          required: false
      responses:
        200:
          description: |
            Succesfully retrieved timeseries
          body:
            application/json:
              type: ObservationTypeListResponse
              example:
                !include examples/sample_dd-observationTypeList-response.json

    /{observationTypeId}:
      description: Request a specific ObservationType by its unique dentifier.
      uriParameters:
        observationTypeId:
          type: Identifier
      get:
        queryParameters:
          process?:
            type: ProcessName
        responses:
          200:
            description: |
              Succesfully retrieved resource
            body:
              application/json:
                type: ObservationTypeResponse
                example:
                  !include examples/sample_dd-observationtype-response.json
          404:
            body:
              application/json:
                type: ProblemResponse
                example:
                  !include examples/sample_dd-error-response.json

######################################################

  /timeseries:
    get:
      description: |
        Retrieve timeseries resource.
        A request where both startTime and endTime are omitted returns a response with just the metadata (implicit includeMetaData = true)
      queryParameters:
        process?:
          type: ProcessName
        startTime?:
          type: StartTime
        endTime?:
          type: EndTime
        locationCode?:
          type: string
          example: "HVH"
        locationName?:
          type: string
          example: "HoekvanHolland"
        sourceName:
          type: SourceName
          example: rws_prediction
        aspectSet?:
          type: AspectSetName
        quantityName?:
          type: QuantityName
        includeMetaData?:
          description: This url query parameter replaces the '/data' control extension of the /timeseries endpoint.
            Metadata is included in the response by default, but can be excluded to reduce response size.
          type: boolean
          default: true
        intervalLength?:
           type: IntervalLength

# Geen van de huidige implementaties hoeft dit de implementeren.
# Dit is een voorbeeld van een attribute waarvoor we geen expliciete
# filter-parameter maken, maar die we in de algemene filter="..." onder gaan brengen.
# (Misschien moeten we voor filter=... iets anders bedenken). Matroos is de enige die
# dit hoeft te implementeren, dus dit valt onder en moet worden beschreven in de 'RWS aansluitvoorwaarden'
# Ook onderstaande brengen we onder in de algemene 'aansluitvoorwaarden'-filter-parameter:
#    ...&filter="...;fullDdResponse:eq:false;..."
#       fullDdResponse:
#         description:
#         required: false
#         type: boolean
#         default: true
# Ook onderstaande brengen we onder in de algemene 'aansluitvoorwaarden'-filter-parameter:
#    ...&filter="...;responceNocationName:eq:HoekvanHolland;locationNamespace:eq:NL.RWS.WM;..."
#       responseLocation:
#         description:
#         type: string
#         required: false
#         example: "locationname:eq:HoekvanHolland:locationNamespace:eq:NL.RWS.WM:parentName:eq:Rotterdam, displayName:eq:Hoek van Holland"
# Ook onderstaande brengen we onder in de algemene 'aansluitvoorwaarden'-filter-parameter:
#    ...&filter="...;responseQuantityName:eq:WaterLevel;..."
#       responseObservationType:
#         description:
#         type: string
#         required: false
#         example: "quantityName:eq:WaterLevel"
# Ook onderstaande brengen we onder in de algemene 'aansluitvoorwaarden'-filter-parameter:
#    ...&filter="...;baseUrl:eq:www.rws.nl/dl/dd-strict/2.0;..."
#       baseUrl:
#         description:
#         type: string
#         required: false
#         example: "www.rws.nl/dl/dd-strict/2.0"
# Gegeven de veelheid aan 'aansluitvoorwaarden'-parameters kunnen we bij nader inzien
# misschien toch niet met ��n filter="..." toe :-).
# Hoe dan ook: geen deel van deze standaard
      responses:
        200:
          description: |
            Succesfully retrieved timeseries
          body:
            application/json:
              type: TimeseriesListResponse
              example:
                !include examples/sample_dd-timeseries-response-aspecten-vert-profile_strict_subset.json
    /{timeseriesId}:
      description: Request a specific Timeseries by its unique dentifier.
      uriParameters:
        timeseriesId:
          type: Identifier
      get:
        queryParameters:
          process?:
            type: ProcessName
            default: measurement
        responses:
          200:
            description: |
              Succesfully retrieved resource
            body:
              application/json:
                type: TimeseriesResponse
                example:
                  !include examples/dd-timeseries-response-aspecten-vert-profile.json
          404:
            body:
              application/json:
                type: ProblemResponse
                example:
                  !include examples/sample_dd-error-response.json
